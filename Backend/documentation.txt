Routes:

//----------------------------------------------------------------------------\

/users:

url: /users/login
Method: POST
body: {mobile: 9999999999}
body_description :  10 digit mobile number required,
                    Indian no need to put +91 front of number, 
                    otp will be send to Mobile Number
errors: if mobile number not provided gets error : 
        status-code : 404, message: 'Mobile Number is needed'
ok result: 1. res.send({message: 'ok'})
           2. mobile is saved in cookie with key 'mobile'


url: /users/verify
Method: POST
body: {otp: 8888}
body_description: otp gotton on mobile number (4 digit number)
errors: 1. if can't get mobile from cookies : 
           status-code : 401, message: 'Login Again'
        2. if otp is not provided in body
           status-code : 404, message: 'Please enter OTP to login'
        3. if user directly gets to this page without going to login page first
           status-code : 401, message: 'Login Again'
        4. if otp is incorrect
           status-code : 401, message: 'OTP incorrect'
ok result: 1. res.send({ message: 'Login Sucessful', token })
           2. token is saved in cookie with key 'token'


//---------------------------------------------------------------------------------

/admin

url: /admin/register
Method: POST
body: {name, email, password, mobile, adminkey} 
body_description: all feilds required
errors: 1. if adminkey does not match
           status-code : 401, message: 'Access Denied'
        3. if admin alreay Registered
           status code : 409, message: 'Admin already registerd'
        2. if any feild not provided
           status-code : 404, message: `Validation failed: ${feild} not provided`
ok result: 1. res.send({message: 'Admin Registered Sucessfully'})


url: /admin/login
Method: POST
body: {email, password}
errors: 1. if admin does not exists
           status-code: 401, message: 'Access Denied'
        2. password does not match 
           status-code: 403, message: 'Wrong Credentials'
ok result: 1. res.send({ message: 'Login Sucessful', token })
           2. token is saved in cookie with key 'token'

//--------------------------------------------------------------------------------

authoriztion middleware:
headers: Authorization: token
headers_description: if cookies does not contains key 'token', 
                     token can be accessed from req.headers.authorization
error: 1. In case cookies are not accessable and token is not passed via headers:
          status-code: 401, message: 'Access Denied'

//--------------------------------------------------------------------------------

/cart

url: /cart
middleware used: authorization
Method: GET
ok result: array of object [{productId, quantity}]


url: /cart/add/:productId
middleware: authorization
Method: POST
errors: 1. Product already available in cart
           status-code: 409, message: 'Product already in cart'
ok result: adds product with id productId into cart of user


url: /cart/remove/:id
middleware: authorization
Method: DELETE
errors: 1. Product with id productId is not in cart
           status-code: 404, message: 'Product not found in cart'
ok result: removes product with productId form cart


url: /cart/increase/:id
middleware: authorization
Method: PATCH
errors: 1. Product with id productId is not in cart
           status-code: 404, message: 'Product not found in cart'
ok result: increases quantity of product with productId by one


url: /cart/decrease/:id
middleware: authorization
Method: PATCH
errors: 1. Product with id productId is not in cart
           status-code: 404, message: 'Product not found in cart'
ok result: decreases quantity of product with productId by one


//-----------------------------------------------------------------------------------